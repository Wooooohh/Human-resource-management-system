<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">

<!--    指向mapper包-->
    <context:component-scan base-package="edu.csuft.mapper">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
<!--    引入数据库相关信息的配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}?useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
<!--        如果有需要，可以将所有的属性全部写到properties文件当中去-->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
<!--        关闭连接后不自动commit-->
        <property name="autoCommitOnClose" value="false"/>
<!--        获取连接超时时间-->
        <property name="checkoutTimeout" value="100000"/>
<!--        当链接失败时重试次数-->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

<!--    1、注入一般mybatis的sqlsessionfactory-->
<!--    2、声明式的事务管理-->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:edu/csuft/mapper/**/*.xml"/>
<!--        引入mapper文件-->

        <property name="configuration">

            <bean class="org.apache.ibatis.session.Configuration">
<!--                可添加参数   -->
                <property name="mapUnderscoreToCamelCase" value="true"/>
            </bean>
        </property>
<!--        插件配置-->
        <property name="plugins">
            <array>
<!--                分页插件的配置 拦截器实现分页功能-->
                <bean class="com.github.pagehelper.PageInterceptor">
                   <property name="properties">
                       <value>
                           helperDialect=mysql
                           reasonable=true
                           supportMethodArguments=true
                           parems=count=countSql
                           aotoRuntimeDialect=true
                       </value>
                   </property>
                </bean>
            </array>
        </property>
    </bean>

<!--    持久层接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="edu.csuft.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
    </bean>
<!--    事务管理 使用数据源事务管理类进行管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    确定事务管理策略 transection-manager:指向上面的transactionManage-->
    <tx:advice transaction-manager="transactionManager" id="transactionAdvice">
<!--        事务处理的相关值以及它的传播性-->
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="delect*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED"
                       rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

<!--    使用aop对事务管理的范围进行织入 明确几个点：-->
<!--    1、对那些地方需要进行事务的管理 execution书写，明确边界-->
<!--    2、使用什么策略去管理-->
<!--    使用的策略tx：advice全部书写与其中，在我们的aop的advisor当中只需要去引用这个事务管理者的建议即可-->
    <aop:config>
<!--        service包下的所有类的所有方法都进行切入-->
        <aop:pointcut id="txCut" expression="execution(* edu.csuft.service..*.*(..))"/>
<!--        切点的建议-->
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="txCut"/>
    </aop:config>

    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>